name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: drako
            asset_name: drako-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: drako
            asset_name: drako-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: drako.exe
            asset_name: drako-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: drako
            asset_name: drako-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: drako
            asset_name: drako-macos-arm64

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build target
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
            chmod +x release/${{ matrix.asset_name }}
          fi
      
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: release/${{ matrix.asset_name }}
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: release
      
      - name: Extract version
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Generate checksums
        run: |
          cd release
          find . -type f -not -name "*.sha256" | sort | xargs sha256sum > checksums.txt
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: drako v${{ steps.extract_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release/drako-linux-amd64/drako-linux-amd64
            release/drako-linux-arm64/drako-linux-arm64
            release/drako-windows-amd64.exe/drako-windows-amd64.exe
            release/drako-macos-amd64/drako-macos-amd64
            release/drako-macos-arm64/drako-macos-arm64
            release/checksums.txt
